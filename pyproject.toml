[build-system]
requires = ["uv_build>=0.7.19,<0.8.0"]
build-backend = "uv_build"

[project]
name = "pydantic-ai-optimizers"
version = "0.0.1"
description = "A library for optimizing PydanticAI agents prompts through iterative improvement and evaluation, built on top of PydanticAI + Pydantic Evals."
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT", file = "LICENSE"}
authors = [
    {name = "Jan Siml", email = "49557684+svilupp@users.noreply.github.com"},
]
keywords = ["pydantic", "ai", "optimizers", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "logfire>=4.3.3",
    "loguru>=0.7.3",
    "pydantic-ai>=0.7.2",
    "pydantic-ai-helpers>=0.0.2",
    "pydantic-evals>=0.7.2",
    "python-dotenv>=1.1.1",
    "textprompts>=0.0.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.12.9",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/svilupp/pydantic-ai-optimizers"
Repository = "https://github.com/svilupp/pydantic-ai-optimizers"
Issues = "https://github.com/svilupp/pydantic-ai-optimizers/issues"

[project.scripts]
pydantic-ai-optimize = "pydantic_ai_optimizers.cli:main"

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=pydantic_ai_optimizers --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src/pydantic_ai_optimizers"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
]
